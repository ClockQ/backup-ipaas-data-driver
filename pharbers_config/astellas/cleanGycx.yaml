name: clean gycx
reference: com.pharbers.ipaas.data.driver.job.PhBaseJob
factory: com.pharbers.ipaas.data.driver.factory.PhJobFactory
actions:
  - name: readGycxFile
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    args:
      null: null
    opers:
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhReadOperator
        args:
          path: hdfs:///data/astellas/pha_config_repository1804/Astellas_201804_Gycx_20180703.csv
      - name: hospIdCastInt
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: HOSP_ID
        plugin:
          name: castInt
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: cast(HOSP_ID as int)
      - name: clean prod name
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: PRODUCT_NAME
        plugin:
          name:
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "case when PRODUCT_NAME is null then MOLE_NAME else PRODUCT_NAME end"
      - name: clean value
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: VALUE
        plugin:
          name:
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "case when STANDARD_UNIT == 0 then 0 else VALUE end"
      - name: clean STANDARD_UNIT
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: STANDARD_UNIT
        plugin:
          name:
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "case when value == 0 then 0 else STANDARD_UNIT end"

  - name: readHospitalFile
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhReadParquetOperator
        args:
          path: hdfs:///repository/hosp_dis_max
      - name: filter
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhFilterOperator
        args:
          inDFName: df
          filter: PHA_IS_REPEAT == 0
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: PHA_HOSP_ID

  - name: readProductFile
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhReadParquetOperator
        args:
          path: hdfs:///repository/prod_etc_dis_max/astellas
      - name: concant
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: min2
        plugin:
          name: concatMin2
          reference: com.pharbers.ipaas.data.driver.plugin.ConcatStrPlugin
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          args:
            columns: ETC_PRODUCT_NAME,ETC_DOSAGE_NAME,ETC_PACKAGE_DES,ETC_PACKAGE_NUMBER,ETC_CORP_NAME
            dilimiter: "|"
      - name: productSelect
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.select
        args:
          inDFName: df
          selects: _id as PRODUCT_ID#regexp_replace(min2, " ", "") as min2#MARKET
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: min2

  - name: readPhaFile
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhReadParquetOperator
        args:
          path: hdfs:///repository/pha
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: GYC

  - name: readProductMatchFile
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.job.PhReadOperator
        args:
          path: hdfs:///data/astellas/pha_config_repository1804/Astellas_ProductMatchTable_20180703.csv
      - name: productMatchSelect
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.select
        args:
          inDFName: df
          selects: regexp_replace(MIN_PRODUCT_UNIT, " ", "") as MIN_PRODUCT_UNIT#regexp_replace(MIN_PRODUCT_UNIT_STANDARD, " ", "") as MIN_PRODUCT_UNIT_STANDARD
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: MIN_PRODUCT_UNIT

  - name: distinctHosp
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name: hospitalSelect
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.select
        args:
          inDFName: readHospitalFile
          selects: HOSPITAL_ID#PHA_HOSP_ID
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: PHA_HOSP_ID

  - name: distinctPha
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name: phaSelect
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.select
        args:
          inDFName: readPhaFile
          selects: GYC#PHA_ID_NEW
      - name: hospIdCastInt
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: GYC
        plugin:
          name: castInt
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: cast(GYC as int)
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.distinctByKey
        args:
          inDFName: df
          keys: GYC

  - name: gycxMatchHosp
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name: joinPha
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.JoinOperator
        args:
          inDFName: readGycxFile
          joinDFName: distinctPha
          joinExpr: HOSP_ID = GYC
          joinType: left
      - name: joinHosp
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.JoinOperator
        args:
          inDFName: df
          joinDFName: distinctHosp
          joinExpr: PHA_ID_NEW = PHA_HOSP_ID
          joinType: left
      - name: addHospId
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: HOSPITAL_ID
        plugin:
          name: fillHospId
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: case when HOSPITAL_ID is not null then HOSPITAL_ID else concat("other", HOSP_ID) end

  - name: gycxMatchProduct
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name: concant
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: gycxMatchHosp
          newColName: min1
        plugin:
          name: concatMin1
          reference: com.pharbers.ipaas.data.driver.plugin.ConcatStrPlugin
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          args:
            columns: PRODUCT_NAME,DOSAGE,PACK_DES,PACK_NUMBER,CORP_NAME
            dilimiter: "|"
      - name: regexpReplaceMin1
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: min1
        plugin:
          name: regexpReplaceMin1
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: regexp_replace(min1, " ", "")
      - name: joinProductMatch
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.JoinOperator
        args:
          inDFName: df
          joinDFName: readProductMatchFile
          joinExpr: min1 = MIN_PRODUCT_UNIT
          joinType: left
      - name: joinProduct
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.JoinOperator
        args:
          inDFName: df
          joinDFName: readProductFile
          joinExpr: MIN_PRODUCT_UNIT_STANDARD = min2
          joinType: inner

  - name: clean
    reference: com.pharbers.ipaas.data.driver.job.PhBaseAction
    factory: com.pharbers.ipaas.data.driver.factory.PhActionFactory
    args:
      null: null
    opers:
      - name: litCompanyId
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: gycxMatchProduct
          newColName: COMPANY_ID
        plugin:
          name: litCompanyId
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "'astellas'"
      - name: litSOURCE
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: SOURCE
        plugin:
          name: litSOURCE
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "'gyc'"
      - name: litProductNameNote
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: PRODUCT_NAME_NOTE
        plugin:
          name: litProductNameNote
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.BaseCalcPlugin
          args:
            exprString: "''"
      - name:
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.select
        args:
          inDFName: df
          selects: COMPANY_ID#SOURCE#YM#HOSPITAL_ID#PRODUCT_ID#cast(VALUE as double) as SALES#cast(STANDARD_UNIT as double) as UNITS#PRODUCT_NAME_NOTE#MARKET
      - name: generateObjectId
        factory: com.pharbers.ipaas.data.driver.factory.PhOperatorFactory
        reference: com.pharbers.ipaas.data.driver.operators.addColumn
        args:
          inDFName: df
          newColName: _id
        plugin:
          name: generateObjectId
          factory: com.pharbers.ipaas.data.driver.factory.PhPluginFactory
          reference: com.pharbers.ipaas.data.driver.plugin.generateObjectId